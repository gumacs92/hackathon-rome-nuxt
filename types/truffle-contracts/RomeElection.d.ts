/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RomeElectionContract
  extends Truffle.Contract<RomeElectionInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RomeElectionInstance>;
}

type AllEvents = never;

export interface RomeElectionInstance extends Truffle.ContractInstance {
  candidateVotes(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  elections(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  hasCandidateByAddress(
    addr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  hasAddressAlreadyVoted(
    addr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setElectionLastsFor: {
    (
      secondsToLast: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      secondsToLast: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      secondsToLast: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      secondsToLast: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  applyAsCandidate: {
    (
      input: { name: string; description: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      input: { name: string; description: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      input: { name: string; description: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      input: { name: string; description: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  vote: {
    (
      voteForId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      voteForId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      voteForId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      voteForId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkElection: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    candidateVotes(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    elections(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    hasCandidateByAddress(
      addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    hasAddressAlreadyVoted(
      addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    setElectionLastsFor: {
      (
        secondsToLast: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        secondsToLast: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        secondsToLast: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        secondsToLast: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    applyAsCandidate: {
      (
        input: { name: string; description: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        input: { name: string; description: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        input: { name: string; description: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        input: { name: string; description: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    vote: {
      (
        voteForId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        voteForId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        voteForId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        voteForId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    checkElection: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
